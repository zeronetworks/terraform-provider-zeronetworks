// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/int32validator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/speakeasy/terraform-provider-zeronetworks/internal/provider/types"
	"github.com/speakeasy/terraform-provider-zeronetworks/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &RPCRuleResource{}
var _ resource.ResourceWithImportState = &RPCRuleResource{}

func NewRPCRuleResource() resource.Resource {
	return &RPCRuleResource{}
}

// RPCRuleResource defines the resource implementation.
type RPCRuleResource struct {
	// Provider configured SDK client.
	client *sdk.ZeroNetworks
}

// RPCRuleResourceModel describes the resource data model.
type RPCRuleResourceModel struct {
	Action               types.Int32           `tfsdk:"action"`
	ChangeTicket         types.String          `tfsdk:"change_ticket"`
	CreatedAt            types.Int64           `tfsdk:"created_at"`
	CreatedBy            *tfTypes.CreatedBy    `tfsdk:"created_by"`
	Description          types.String          `tfsdk:"description"`
	ExcludedAssetIdsList []types.String        `tfsdk:"excluded_asset_ids_list"`
	ExcludedAssetInfos   []tfTypes.IDNamePair1 `tfsdk:"excluded_asset_infos"`
	ExpiresAt            types.Int64           `tfsdk:"expires_at"`
	ID                   types.String          `tfsdk:"id"`
	InterfaceUuidsList   []types.String        `tfsdk:"interface_uuids_list"`
	LocalAssetID         types.String          `tfsdk:"local_asset_id"`
	LocalAssetInfo       *tfTypes.IDNamePair1  `tfsdk:"local_asset_info"`
	Name                 types.String          `tfsdk:"name"`
	OpNumbersList        []types.Int64         `tfsdk:"op_numbers_list"`
	ParentID             types.String          `tfsdk:"parent_id"`
	ParentType           types.Int32           `tfsdk:"parent_type"`
	ProtocolsList        []types.Int64         `tfsdk:"protocols_list"`
	RemoteAssetIdsList   []types.String        `tfsdk:"remote_asset_ids_list"`
	RemoteAssetInfos     []tfTypes.IDNamePair1 `tfsdk:"remote_asset_infos"`
	RuleClass            types.Int32           `tfsdk:"rule_class"`
	State                types.Int32           `tfsdk:"state"`
	UpdatedAt            types.Int64           `tfsdk:"updated_at"`
	UpdatedBy            *tfTypes.IDNamePair1  `tfsdk:"updated_by"`
	UserIdsList          []types.String        `tfsdk:"user_ids_list"`
	UserInfos            []tfTypes.IDNamePair1 `tfsdk:"user_infos"`
}

func (r *RPCRuleResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_rpc_rule"
}

func (r *RPCRuleResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "RPCRule Resource",
		Attributes: map[string]schema.Attribute{
			"action": schema.Int32Attribute{
				Required: true,
				MarkdownDescription: `* 1 - Allow` + "\n" +
					`* 2 - Block` + "\n" +
					`must be one of ["1", "2"]`,
				Validators: []validator.Int32{
					int32validator.OneOf(1, 2),
				},
			},
			"change_ticket": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"created_at": schema.Int64Attribute{
				Computed:    true,
				Description: `Epoch Millis`,
			},
			"created_by": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"created_by": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"id": schema.StringAttribute{
								Computed:    true,
								Description: `EntityId`,
							},
							"name": schema.StringAttribute{
								Computed:    true,
								Description: `Entity Name`,
							},
						},
					},
					"email": schema.StringAttribute{
						Computed: true,
					},
					"enforcement_source": schema.Int32Attribute{
						Computed: true,
						MarkdownDescription: `* '1' - ReactivePolicy` + "\n" +
							`* '2' - Automated` + "\n" +
							`* '3' - AccessPortal` + "\n" +
							`* '4' - AdminPortal` + "\n" +
							`* '5' - AI` + "\n" +
							`* '6' - API` + "\n" +
							`* '7' - Setup` + "\n" +
							`* '8' - Connect` + "\n" +
							`* '9' - System` + "\n" +
							`* '10' - DownloadPortal` + "\n" +
							`* '11' - ExternalAccessPortal` + "\n" +
							`* '12' - DayTwo` + "\n" +
							`must be one of ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"]`,
						Validators: []validator.Int32{
							int32validator.OneOf(
								1,
								2,
								3,
								4,
								5,
								6,
								7,
								8,
								9,
								10,
								11,
								12,
							),
						},
					},
					"user_role": schema.Int32Attribute{
						Computed: true,
						MarkdownDescription: `* '0' - Unspecified` + "\n" +
							`* '1' - Admin` + "\n" +
							`* '2' - Viewer` + "\n" +
							`* '3' - Regular` + "\n" +
							`* '4' - API-FullAccess` + "\n" +
							`* '5' - API-ReadOnly` + "\n" +
							`* '6' - SelfService` + "\n" +
							`* '7' - CloudConnectorProvisioning` + "\n" +
							`* '8' - JAMF Asset` + "\n" +
							`* '9' - Asset Manager` + "\n" +
							`* '10' - Operator` + "\n" +
							`* '11' - Service Now Token` + "\n" +
							`must be one of ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11"]`,
						Validators: []validator.Int32{
							int32validator.OneOf(
								0,
								1,
								2,
								3,
								4,
								5,
								6,
								7,
								8,
								9,
								10,
								11,
							),
						},
					},
				},
			},
			"description": schema.StringAttribute{
				Required: true,
			},
			"excluded_asset_ids_list": schema.ListAttribute{
				Required:    true,
				ElementType: types.StringType,
			},
			"excluded_asset_infos": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed:    true,
							Description: `EntityId`,
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Description: `Entity Name`,
						},
					},
				},
			},
			"expires_at": schema.Int64Attribute{
				Computed:    true,
				Optional:    true,
				Description: `Epoch Millis`,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `The id of the rule`,
			},
			"interface_uuids_list": schema.ListAttribute{
				Required:    true,
				ElementType: types.StringType,
				MarkdownDescription: `one of the following: ` + "\n" +
					`* "rpcAnyInterface" for any interface ` + "\n" +
					`* List of interface uuids for explicit interfaces`,
			},
			"local_asset_id": schema.StringAttribute{
				Required: true,
			},
			"local_asset_info": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed:    true,
						Description: `EntityId`,
					},
					"name": schema.StringAttribute{
						Computed:    true,
						Description: `Entity Name`,
					},
				},
			},
			"name": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"op_numbers_list": schema.ListAttribute{
				Required:    true,
				ElementType: types.Int64Type,
			},
			"parent_id": schema.StringAttribute{
				Computed: true,
			},
			"parent_type": schema.Int32Attribute{
				Computed: true,
			},
			"protocols_list": schema.ListAttribute{
				Required:    true,
				ElementType: types.Int64Type,
				MarkdownDescription: `* NULL - Any` + "\n" +
					`* '1' - Rules RPC over SMB` + "\n" +
					`* '2' - Rules RPC over TCP`,
			},
			"remote_asset_ids_list": schema.ListAttribute{
				Required:    true,
				ElementType: types.StringType,
			},
			"remote_asset_infos": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed:    true,
							Description: `EntityId`,
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Description: `Entity Name`,
						},
					},
				},
			},
			"rule_class": schema.Int32Attribute{
				Computed: true,
				MarkdownDescription: `* '1' - Trivial` + "\n" +
					`* '2' - Permissive` + "\n" +
					`* '3' - Privileged` + "\n" +
					`* '4' - Critical` + "\n" +
					`* '5' - System` + "\n" +
					`* '6' - Preventative` + "\n" +
					`* '8' - Dangerous` + "\n" +
					`must be one of ["1", "2", "3", "4", "5", "6", "8"]`,
				Validators: []validator.Int32{
					int32validator.OneOf(
						1,
						2,
						3,
						4,
						5,
						6,
						8,
					),
				},
			},
			"state": schema.Int32Attribute{
				Required: true,
				MarkdownDescription: `* '1' - Enabled` + "\n" +
					`* '2' - Disabled` + "\n" +
					`* '3' - Deleted By User` + "\n" +
					`* '4' - Pending Review` + "\n" +
					`* '5' - Pending Review Auto` + "\n" +
					`* '6' - Rejected by User` + "\n" +
					`* '7' - Excluded by User` + "\n" +
					`must be one of ["1", "2", "3", "4", "5", "6", "7"]`,
				Validators: []validator.Int32{
					int32validator.OneOf(
						1,
						2,
						3,
						4,
						5,
						6,
						7,
					),
				},
			},
			"updated_at": schema.Int64Attribute{
				Computed:    true,
				Description: `Epoch Millis`,
			},
			"updated_by": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed:    true,
						Description: `EntityId`,
					},
					"name": schema.StringAttribute{
						Computed:    true,
						Description: `Entity Name`,
					},
				},
			},
			"user_ids_list": schema.ListAttribute{
				Required:    true,
				ElementType: types.StringType,
			},
			"user_infos": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed:    true,
							Description: `EntityId`,
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Description: `Entity Name`,
						},
					},
				},
			},
		},
	}
}

func (r *RPCRuleResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.ZeroNetworks)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.ZeroNetworks, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *RPCRuleResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *RPCRuleResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToSharedRPCRuleBody(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.RulesRPC.RPCRulesCreate(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.RPCRuleResponse != nil && res.RPCRuleResponse.Item != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedRPCRule(ctx, res.RPCRuleResponse.Item)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *RPCRuleResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *RPCRuleResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsRPCRuleGetRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.RulesRPC.RPCRuleGet(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.RPCRuleResponse != nil && res.RPCRuleResponse.Item != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedRPCRule(ctx, res.RPCRuleResponse.Item)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *RPCRuleResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *RPCRuleResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsRPCRuleUpdateRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.RulesRPC.RPCRuleUpdate(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.RPCRuleResponse != nil && res.RPCRuleResponse.Item != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedRPCRule(ctx, res.RPCRuleResponse.Item)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *RPCRuleResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *RPCRuleResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsRPCRuleDeleteRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.RulesRPC.RPCRuleDelete(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *RPCRuleResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), req.ID)...)
}
