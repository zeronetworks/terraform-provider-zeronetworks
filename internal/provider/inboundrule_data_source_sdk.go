// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/zeronetworks/terraform-provider-zeronetworks/internal/provider/typeconvert"
	tfTypes "github.com/zeronetworks/terraform-provider-zeronetworks/internal/provider/types"
	"github.com/zeronetworks/terraform-provider-zeronetworks/internal/sdk/models/operations"
	"github.com/zeronetworks/terraform-provider-zeronetworks/internal/sdk/models/shared"
)

func (r *InboundRuleDataSourceModel) RefreshFromSharedRule(ctx context.Context, resp *shared.Rule) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Action != nil {
			r.Action = types.Int32Value(int32(*resp.Action))
		} else {
			r.Action = types.Int32Null()
		}
		r.ActivitiesCount = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.ActivitiesCount))
		r.AeOverridden = types.BoolPointerValue(resp.AeOverridden)
		r.ApprovedAt = types.Int64PointerValue(resp.ApprovedAt)
		if resp.ApprovedBy == nil {
			r.ApprovedBy = nil
		} else {
			r.ApprovedBy = &tfTypes.IDNamePair1{}
			r.ApprovedBy.ID = types.StringPointerValue(resp.ApprovedBy.ID)
			r.ApprovedBy.Name = types.StringPointerValue(resp.ApprovedBy.Name)
		}
		r.ChangeTicket = types.StringPointerValue(resp.ChangeTicket)
		r.Context = types.Int64PointerValue(resp.Context)
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		if resp.CreatedBy == nil {
			r.CreatedBy = nil
		} else {
			r.CreatedBy = &tfTypes.CreatedBy{}
			if resp.CreatedBy.CreatedBy == nil {
				r.CreatedBy.CreatedBy = nil
			} else {
				r.CreatedBy.CreatedBy = &tfTypes.IDNamePair1{}
				r.CreatedBy.CreatedBy.ID = types.StringPointerValue(resp.CreatedBy.CreatedBy.ID)
				r.CreatedBy.CreatedBy.Name = types.StringPointerValue(resp.CreatedBy.CreatedBy.Name)
			}
			r.CreatedBy.Email = types.StringPointerValue(resp.CreatedBy.Email)
			if resp.CreatedBy.EnforcementSource != nil {
				r.CreatedBy.EnforcementSource = types.Int32Value(int32(*resp.CreatedBy.EnforcementSource))
			} else {
				r.CreatedBy.EnforcementSource = types.Int32Null()
			}
			if resp.CreatedBy.UserRole != nil {
				r.CreatedBy.UserRole = types.Int32Value(int32(*resp.CreatedBy.UserRole))
			} else {
				r.CreatedBy.UserRole = types.Int32Null()
			}
		}
		r.DeletedAt = types.Int64PointerValue(resp.DeletedAt)
		if resp.DeletedBy == nil {
			r.DeletedBy = nil
		} else {
			r.DeletedBy = &tfTypes.IDNamePair1{}
			r.DeletedBy.ID = types.StringPointerValue(resp.DeletedBy.ID)
			r.DeletedBy.Name = types.StringPointerValue(resp.DeletedBy.Name)
		}
		r.Description = types.StringPointerValue(resp.Description)
		if resp.Direction != nil {
			r.Direction = types.Int32Value(int32(*resp.Direction))
		} else {
			r.Direction = types.Int32Null()
		}
		r.ExcludedEntityInfos = []tfTypes.IDNamePair1{}

		for _, excludedEntityInfosItem := range resp.ExcludedEntityInfos {
			var excludedEntityInfos tfTypes.IDNamePair1

			excludedEntityInfos.ID = types.StringPointerValue(excludedEntityInfosItem.ID)
			excludedEntityInfos.Name = types.StringPointerValue(excludedEntityInfosItem.Name)

			r.ExcludedEntityInfos = append(r.ExcludedEntityInfos, excludedEntityInfos)
		}
		r.ExcludedLocalIdsList = make([]types.String, 0, len(resp.ExcludedLocalIdsList))
		for _, v := range resp.ExcludedLocalIdsList {
			r.ExcludedLocalIdsList = append(r.ExcludedLocalIdsList, types.StringValue(v))
		}
		r.ExpiresAt = types.Int64PointerValue(resp.ExpiresAt)
		r.ID = types.StringPointerValue(resp.ID)
		if resp.IPSecOpt != nil {
			r.IPSecOpt = types.Int32Value(int32(*resp.IPSecOpt))
		} else {
			r.IPSecOpt = types.Int32Null()
		}
		r.IsRejectOnLinux = types.BoolPointerValue(resp.IsRejectOnLinux)
		r.LocalEntityID = types.StringPointerValue(resp.LocalEntityID)
		r.LocalEntityInfos = []tfTypes.LocalEntityInfo{}

		for _, localEntityInfosItem := range resp.LocalEntityInfos {
			var localEntityInfos tfTypes.LocalEntityInfo

			if localEntityInfosItem.Asset != nil {
				localEntityInfos.Asset = &tfTypes.Asset{}
				if localEntityInfosItem.Asset.AssetStatus != nil {
					localEntityInfos.Asset.AssetStatus = types.Int64Value(int64(*localEntityInfosItem.Asset.AssetStatus))
				} else {
					localEntityInfos.Asset.AssetStatus = types.Int64Null()
				}
				if localEntityInfosItem.Asset.AssetType != nil {
					localEntityInfos.Asset.AssetType = types.Int32Value(int32(*localEntityInfosItem.Asset.AssetType))
				} else {
					localEntityInfos.Asset.AssetType = types.Int32Null()
				}
				localEntityInfos.Asset.AssignedDeploymentID = types.StringPointerValue(localEntityInfosItem.Asset.AssignedDeploymentID)
				localEntityInfos.Asset.BreakGlassActivated = types.BoolPointerValue(localEntityInfosItem.Asset.BreakGlassActivated)
				localEntityInfos.Asset.Domain = types.StringPointerValue(localEntityInfosItem.Asset.Domain)
				localEntityInfos.Asset.ExternalDeviceID = types.StringPointerValue(localEntityInfosItem.Asset.ExternalDeviceID)
				localEntityInfos.Asset.Fqdn = types.StringPointerValue(localEntityInfosItem.Asset.Fqdn)
				localEntityInfos.Asset.HasDNS = types.BoolPointerValue(localEntityInfosItem.Asset.HasDNS)
				if localEntityInfosItem.Asset.HealthState == nil {
					localEntityInfos.Asset.HealthState = nil
				} else {
					localEntityInfos.Asset.HealthState = &tfTypes.HealthState{}
					localEntityInfos.Asset.HealthState.HealthIssuesList = []tfTypes.HealthIssue{}

					for _, healthIssuesListItem := range localEntityInfosItem.Asset.HealthState.HealthIssuesList {
						var healthIssuesList tfTypes.HealthIssue

						healthIssuesList.Details = types.StringPointerValue(healthIssuesListItem.Details)
						if healthIssuesListItem.IssueCode != nil {
							healthIssuesList.IssueCode = types.Int32Value(int32(*healthIssuesListItem.IssueCode))
						} else {
							healthIssuesList.IssueCode = types.Int32Null()
						}

						localEntityInfos.Asset.HealthState.HealthIssuesList = append(localEntityInfos.Asset.HealthState.HealthIssuesList, healthIssuesList)
					}
					if localEntityInfosItem.Asset.HealthState.HealthStatus != nil {
						localEntityInfos.Asset.HealthState.HealthStatus = types.Int32Value(int32(*localEntityInfosItem.Asset.HealthState.HealthStatus))
					} else {
						localEntityInfos.Asset.HealthState.HealthStatus = types.Int32Null()
					}
				}
				localEntityInfos.Asset.ID = types.StringPointerValue(localEntityInfosItem.Asset.ID)
				localEntityInfos.Asset.IdentityProtectAt = types.Int64PointerValue(localEntityInfosItem.Asset.IdentityProtectAt)
				localEntityInfos.Asset.IdentityProtectedAt = types.Int64PointerValue(localEntityInfosItem.Asset.IdentityProtectedAt)
				localEntityInfos.Asset.IdentityProtectionState = types.Int64PointerValue(localEntityInfosItem.Asset.IdentityProtectionState)
				if localEntityInfosItem.Asset.InactiveReason != nil {
					localEntityInfos.Asset.InactiveReason = types.Int32Value(int32(*localEntityInfosItem.Asset.InactiveReason))
				} else {
					localEntityInfos.Asset.InactiveReason = types.Int32Null()
				}
				localEntityInfos.Asset.InactiveSince = types.Int64PointerValue(localEntityInfosItem.Asset.InactiveSince)
				localEntityInfos.Asset.IPV4Addresses = make([]types.String, 0, len(localEntityInfosItem.Asset.IPV4Addresses))
				for _, v := range localEntityInfosItem.Asset.IPV4Addresses {
					localEntityInfos.Asset.IPV4Addresses = append(localEntityInfos.Asset.IPV4Addresses, types.StringValue(v))
				}
				localEntityInfos.Asset.IPV6Addresses = make([]types.String, 0, len(localEntityInfosItem.Asset.IPV6Addresses))
				for _, v := range localEntityInfosItem.Asset.IPV6Addresses {
					localEntityInfos.Asset.IPV6Addresses = append(localEntityInfos.Asset.IPV6Addresses, types.StringValue(v))
				}
				localEntityInfos.Asset.IsQuarantined = types.BoolPointerValue(localEntityInfosItem.Asset.IsQuarantined)
				localEntityInfos.Asset.LastLogon = types.Int64PointerValue(localEntityInfosItem.Asset.LastLogon)
				localEntityInfos.Asset.Manufacturer = types.StringPointerValue(localEntityInfosItem.Asset.Manufacturer)
				localEntityInfos.Asset.Name = types.StringPointerValue(localEntityInfosItem.Asset.Name)
				localEntityInfos.Asset.OperatingSystem = types.StringPointerValue(localEntityInfosItem.Asset.OperatingSystem)
				localEntityInfos.Asset.OsType = types.Int64PointerValue(localEntityInfosItem.Asset.OsType)
				if localEntityInfosItem.Asset.OtLocattion == nil {
					localEntityInfos.Asset.OtLocattion = nil
				} else {
					localEntityInfos.Asset.OtLocattion = &tfTypes.OtLocation{}
					localEntityInfos.Asset.OtLocattion.InterfaceName = types.StringPointerValue(localEntityInfosItem.Asset.OtLocattion.InterfaceName)
					localEntityInfos.Asset.OtLocattion.Name = types.StringPointerValue(localEntityInfosItem.Asset.OtLocattion.Name)
					localEntityInfos.Asset.OtLocattion.SwitchID = types.StringPointerValue(localEntityInfosItem.Asset.OtLocattion.SwitchID)
				}
				localEntityInfos.Asset.OutboundRestriction = types.Int64PointerValue(localEntityInfosItem.Asset.OutboundRestriction)
				localEntityInfos.Asset.PasswordUpdateTime = types.Int64PointerValue(localEntityInfosItem.Asset.PasswordUpdateTime)
				localEntityInfos.Asset.PreferredDeploymentID = types.StringPointerValue(localEntityInfosItem.Asset.PreferredDeploymentID)
				localEntityInfos.Asset.PrincipalName = types.StringPointerValue(localEntityInfosItem.Asset.PrincipalName)
				localEntityInfos.Asset.ProtectAt = types.Int64PointerValue(localEntityInfosItem.Asset.ProtectAt)
				localEntityInfos.Asset.ProtectedAt = types.Int64PointerValue(localEntityInfosItem.Asset.ProtectedAt)
				if localEntityInfosItem.Asset.ProtectionState != nil {
					localEntityInfos.Asset.ProtectionState = types.Int32Value(int32(*localEntityInfosItem.Asset.ProtectionState))
				} else {
					localEntityInfos.Asset.ProtectionState = types.Int32Null()
				}
				localEntityInfos.Asset.PurdueLevel = types.Int64PointerValue(localEntityInfosItem.Asset.PurdueLevel)
				localEntityInfos.Asset.RPCMonitored = types.BoolPointerValue(localEntityInfosItem.Asset.RPCMonitored)
				localEntityInfos.Asset.RPCProtectAt = types.Int64PointerValue(localEntityInfosItem.Asset.RPCProtectAt)
				localEntityInfos.Asset.RPCProtectedAt = types.Int64PointerValue(localEntityInfosItem.Asset.RPCProtectedAt)
				localEntityInfos.Asset.RPCProtectionState = types.Int64PointerValue(localEntityInfosItem.Asset.RPCProtectionState)
				if localEntityInfosItem.Asset.Source != nil {
					localEntityInfos.Asset.Source = types.Int32Value(int32(*localEntityInfosItem.Asset.Source))
				} else {
					localEntityInfos.Asset.Source = types.Int32Null()
				}
				localEntityInfos.Asset.SwitchLocationOverridden = types.BoolPointerValue(localEntityInfosItem.Asset.SwitchLocationOverridden)
			}
			if localEntityInfosItem.Group != nil {
				localEntityInfos.Group = &tfTypes.Group{}
				localEntityInfos.Group.AddedAt = types.Int64PointerValue(localEntityInfosItem.Group.AddedAt)
				if localEntityInfosItem.Group.AddedBy == nil {
					localEntityInfos.Group.AddedBy = nil
				} else {
					localEntityInfos.Group.AddedBy = &tfTypes.AddedBy{}
					localEntityInfos.Group.AddedBy.ID = types.StringPointerValue(localEntityInfosItem.Group.AddedBy.ID)
					localEntityInfos.Group.AddedBy.Name = types.StringPointerValue(localEntityInfosItem.Group.AddedBy.Name)
				}
				localEntityInfos.Group.CreatedAt = types.Int64PointerValue(localEntityInfosItem.Group.CreatedAt)
				localEntityInfos.Group.Description = types.StringPointerValue(localEntityInfosItem.Group.Description)
				localEntityInfos.Group.DirectMembersCount = types.Int64PointerValue(localEntityInfosItem.Group.DirectMembersCount)
				localEntityInfos.Group.Domain = types.StringPointerValue(localEntityInfosItem.Group.Domain)
				localEntityInfos.Group.ExternalID = types.StringPointerValue(localEntityInfosItem.Group.ExternalID)
				localEntityInfos.Group.GUID = types.StringPointerValue(localEntityInfosItem.Group.GUID)
				localEntityInfos.Group.HasProtectionPolicy = types.BoolPointerValue(localEntityInfosItem.Group.HasProtectionPolicy)
				localEntityInfos.Group.ID = types.StringPointerValue(localEntityInfosItem.Group.ID)
				localEntityInfos.Group.Name = types.StringPointerValue(localEntityInfosItem.Group.Name)
				localEntityInfos.Group.PrincipalName = types.StringPointerValue(localEntityInfosItem.Group.PrincipalName)
				localEntityInfos.Group.Role = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(localEntityInfosItem.Group.Role))
				localEntityInfos.Group.Sid = types.StringPointerValue(localEntityInfosItem.Group.Sid)
				localEntityInfos.Group.UpdatedAt = types.Int64PointerValue(localEntityInfosItem.Group.UpdatedAt)
			}

			r.LocalEntityInfos = append(r.LocalEntityInfos, localEntityInfos)
		}
		r.LocalProcessesList = make([]types.String, 0, len(resp.LocalProcessesList))
		for _, v := range resp.LocalProcessesList {
			r.LocalProcessesList = append(r.LocalProcessesList, types.StringValue(v))
		}
		r.MultipleLocalEntityIdsList = make([]types.String, 0, len(resp.MultipleLocalEntityIdsList))
		for _, v := range resp.MultipleLocalEntityIdsList {
			r.MultipleLocalEntityIdsList = append(r.MultipleLocalEntityIdsList, types.StringValue(v))
		}
		r.Name = types.StringPointerValue(resp.Name)
		r.ParentID = types.StringPointerValue(resp.ParentID)
		r.ParentSwitchRuleID = types.StringPointerValue(resp.ParentSwitchRuleID)
		r.ParentSwitchRuleType = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.ParentSwitchRuleType))
		r.ParentType = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.ParentType))
		r.PortsList = []tfTypes.PortsList{}

		for _, portsListItem := range resp.PortsList {
			var portsList tfTypes.PortsList

			portsList.Ports = types.StringPointerValue(portsListItem.Ports)
			if portsListItem.ProtocolType != nil {
				portsList.ProtocolType = types.Int32Value(int32(*portsListItem.ProtocolType))
			} else {
				portsList.ProtocolType = types.Int32Null()
			}

			r.PortsList = append(r.PortsList, portsList)
		}
		r.RemoteEntityIdsList = make([]types.String, 0, len(resp.RemoteEntityIdsList))
		for _, v := range resp.RemoteEntityIdsList {
			r.RemoteEntityIdsList = append(r.RemoteEntityIdsList, types.StringValue(v))
		}
		r.RemoteEntityInfos = []tfTypes.IDNamePair1{}

		for _, remoteEntityInfosItem := range resp.RemoteEntityInfos {
			var remoteEntityInfos tfTypes.IDNamePair1

			remoteEntityInfos.ID = types.StringPointerValue(remoteEntityInfosItem.ID)
			remoteEntityInfos.Name = types.StringPointerValue(remoteEntityInfosItem.Name)

			r.RemoteEntityInfos = append(r.RemoteEntityInfos, remoteEntityInfos)
		}
		if resp.Ruleclass != nil {
			r.Ruleclass = types.Int32Value(int32(*resp.Ruleclass))
		} else {
			r.Ruleclass = types.Int32Null()
		}
		if resp.RuleReview == nil {
			r.RuleReview = nil
		} else {
			r.RuleReview = &tfTypes.RuleReviewReason{}
			r.RuleReview.Details = types.StringPointerValue(resp.RuleReview.Details)
			r.RuleReview.Reason = types.Int64Value(resp.RuleReview.Reason)
		}
		r.ServicesList = make([]types.String, 0, len(resp.ServicesList))
		for _, v := range resp.ServicesList {
			r.ServicesList = append(r.ServicesList, types.StringValue(v))
		}
		r.SrcUsersList = []tfTypes.SrcUsersList{}

		for _, srcUsersListItem := range resp.SrcUsersList {
			var srcUsersList tfTypes.SrcUsersList

			srcUsersList.ID = types.StringPointerValue(srcUsersListItem.ID)
			srcUsersList.Sid = types.StringPointerValue(srcUsersListItem.Sid)

			r.SrcUsersList = append(r.SrcUsersList, srcUsersList)
		}
		if resp.State != nil {
			r.State = types.Int32Value(int32(*resp.State))
		} else {
			r.State = types.Int32Null()
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
		if resp.UpdatedBy == nil {
			r.UpdatedBy = nil
		} else {
			r.UpdatedBy = &tfTypes.IDNamePair1{}
			r.UpdatedBy.ID = types.StringPointerValue(resp.UpdatedBy.ID)
			r.UpdatedBy.Name = types.StringPointerValue(resp.UpdatedBy.Name)
		}
	}

	return diags
}

func (r *InboundRuleDataSourceModel) ToOperationsInboundRuleGetRequest(ctx context.Context) (*operations.InboundRuleGetRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.InboundRuleGetRequest{
		ID: id,
	}

	return &out, diags
}
