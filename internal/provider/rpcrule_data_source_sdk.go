// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/speakeasy/terraform-provider-zeronetworks/internal/provider/typeconvert"
	tfTypes "github.com/speakeasy/terraform-provider-zeronetworks/internal/provider/types"
	"github.com/speakeasy/terraform-provider-zeronetworks/internal/sdk/models/operations"
	"github.com/speakeasy/terraform-provider-zeronetworks/internal/sdk/models/shared"
)

func (r *RPCRuleDataSourceModel) ToOperationsRPCRuleGetRequest(ctx context.Context) (*operations.RPCRuleGetRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.RPCRuleGetRequest{
		ID: id,
	}

	return &out, diags
}

func (r *RPCRuleDataSourceModel) RefreshFromSharedRPCRule(ctx context.Context, resp *shared.RPCRule) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Action != nil {
			r.Action = types.Int32Value(int32(*resp.Action))
		} else {
			r.Action = types.Int32Null()
		}
		r.ChangeTicket = types.StringPointerValue(resp.ChangeTicket)
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		if resp.CreatedBy == nil {
			r.CreatedBy = nil
		} else {
			r.CreatedBy = &tfTypes.CreatedBy{}
			if resp.CreatedBy.CreatedBy == nil {
				r.CreatedBy.CreatedBy = nil
			} else {
				r.CreatedBy.CreatedBy = &tfTypes.IDNamePair1{}
				r.CreatedBy.CreatedBy.ID = types.StringPointerValue(resp.CreatedBy.CreatedBy.ID)
				r.CreatedBy.CreatedBy.Name = types.StringPointerValue(resp.CreatedBy.CreatedBy.Name)
			}
			r.CreatedBy.Email = types.StringPointerValue(resp.CreatedBy.Email)
			if resp.CreatedBy.EnforcementSource != nil {
				r.CreatedBy.EnforcementSource = types.Int32Value(int32(*resp.CreatedBy.EnforcementSource))
			} else {
				r.CreatedBy.EnforcementSource = types.Int32Null()
			}
			if resp.CreatedBy.UserRole != nil {
				r.CreatedBy.UserRole = types.Int32Value(int32(*resp.CreatedBy.UserRole))
			} else {
				r.CreatedBy.UserRole = types.Int32Null()
			}
		}
		r.Description = types.StringPointerValue(resp.Description)
		r.ExcludedAssetIdsList = make([]types.String, 0, len(resp.ExcludedAssetIdsList))
		for _, v := range resp.ExcludedAssetIdsList {
			r.ExcludedAssetIdsList = append(r.ExcludedAssetIdsList, types.StringValue(v))
		}
		r.ExcludedAssetInfos = []tfTypes.IDNamePair1{}
		if len(r.ExcludedAssetInfos) > len(resp.ExcludedAssetInfos) {
			r.ExcludedAssetInfos = r.ExcludedAssetInfos[:len(resp.ExcludedAssetInfos)]
		}
		for excludedAssetInfosCount, excludedAssetInfosItem := range resp.ExcludedAssetInfos {
			var excludedAssetInfos tfTypes.IDNamePair1
			excludedAssetInfos.ID = types.StringPointerValue(excludedAssetInfosItem.ID)
			excludedAssetInfos.Name = types.StringPointerValue(excludedAssetInfosItem.Name)
			if excludedAssetInfosCount+1 > len(r.ExcludedAssetInfos) {
				r.ExcludedAssetInfos = append(r.ExcludedAssetInfos, excludedAssetInfos)
			} else {
				r.ExcludedAssetInfos[excludedAssetInfosCount].ID = excludedAssetInfos.ID
				r.ExcludedAssetInfos[excludedAssetInfosCount].Name = excludedAssetInfos.Name
			}
		}
		r.ExpiresAt = types.Int64PointerValue(resp.ExpiresAt)
		r.ID = types.StringPointerValue(resp.ID)
		r.InterfaceUuidsList = make([]types.String, 0, len(resp.InterfaceUuidsList))
		for _, v := range resp.InterfaceUuidsList {
			r.InterfaceUuidsList = append(r.InterfaceUuidsList, types.StringValue(v))
		}
		r.LocalAssetID = types.StringPointerValue(resp.LocalAssetID)
		if resp.LocalAssetInfo == nil {
			r.LocalAssetInfo = nil
		} else {
			r.LocalAssetInfo = &tfTypes.IDNamePair1{}
			r.LocalAssetInfo.ID = types.StringPointerValue(resp.LocalAssetInfo.ID)
			r.LocalAssetInfo.Name = types.StringPointerValue(resp.LocalAssetInfo.Name)
		}
		r.Name = types.StringPointerValue(resp.Name)
		r.OpNumbersList = make([]types.Int64, 0, len(resp.OpNumbersList))
		for _, v := range resp.OpNumbersList {
			r.OpNumbersList = append(r.OpNumbersList, types.Int64Value(v))
		}
		r.ParentID = types.StringPointerValue(resp.ParentID)
		r.ParentType = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.ParentType))
		r.ProtocolsList = make([]types.Int32, 0, len(resp.ProtocolsList))
		for _, v := range resp.ProtocolsList {
			r.ProtocolsList = append(r.ProtocolsList, types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer((*int)(v))))
		}
		r.RemoteAssetIdsList = make([]types.String, 0, len(resp.RemoteAssetIdsList))
		for _, v := range resp.RemoteAssetIdsList {
			r.RemoteAssetIdsList = append(r.RemoteAssetIdsList, types.StringValue(v))
		}
		r.RemoteAssetInfos = []tfTypes.IDNamePair1{}
		if len(r.RemoteAssetInfos) > len(resp.RemoteAssetInfos) {
			r.RemoteAssetInfos = r.RemoteAssetInfos[:len(resp.RemoteAssetInfos)]
		}
		for remoteAssetInfosCount, remoteAssetInfosItem := range resp.RemoteAssetInfos {
			var remoteAssetInfos tfTypes.IDNamePair1
			remoteAssetInfos.ID = types.StringPointerValue(remoteAssetInfosItem.ID)
			remoteAssetInfos.Name = types.StringPointerValue(remoteAssetInfosItem.Name)
			if remoteAssetInfosCount+1 > len(r.RemoteAssetInfos) {
				r.RemoteAssetInfos = append(r.RemoteAssetInfos, remoteAssetInfos)
			} else {
				r.RemoteAssetInfos[remoteAssetInfosCount].ID = remoteAssetInfos.ID
				r.RemoteAssetInfos[remoteAssetInfosCount].Name = remoteAssetInfos.Name
			}
		}
		if resp.RuleClass != nil {
			r.RuleClass = types.Int32Value(int32(*resp.RuleClass))
		} else {
			r.RuleClass = types.Int32Null()
		}
		if resp.State != nil {
			r.State = types.Int32Value(int32(*resp.State))
		} else {
			r.State = types.Int32Null()
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
		if resp.UpdatedBy == nil {
			r.UpdatedBy = nil
		} else {
			r.UpdatedBy = &tfTypes.IDNamePair1{}
			r.UpdatedBy.ID = types.StringPointerValue(resp.UpdatedBy.ID)
			r.UpdatedBy.Name = types.StringPointerValue(resp.UpdatedBy.Name)
		}
		r.UserIdsList = make([]types.String, 0, len(resp.UserIdsList))
		for _, v := range resp.UserIdsList {
			r.UserIdsList = append(r.UserIdsList, types.StringValue(v))
		}
		r.UserInfos = []tfTypes.IDNamePair1{}
		if len(r.UserInfos) > len(resp.UserInfos) {
			r.UserInfos = r.UserInfos[:len(resp.UserInfos)]
		}
		for userInfosCount, userInfosItem := range resp.UserInfos {
			var userInfos tfTypes.IDNamePair1
			userInfos.ID = types.StringPointerValue(userInfosItem.ID)
			userInfos.Name = types.StringPointerValue(userInfosItem.Name)
			if userInfosCount+1 > len(r.UserInfos) {
				r.UserInfos = append(r.UserInfos, userInfos)
			} else {
				r.UserInfos[userInfosCount].ID = userInfos.ID
				r.UserInfos[userInfosCount].Name = userInfos.Name
			}
		}
	}

	return diags
}
