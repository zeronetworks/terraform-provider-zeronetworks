// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/speakeasy/terraform-provider-zeronetworks/internal/provider/typeconvert"
	tfTypes "github.com/speakeasy/terraform-provider-zeronetworks/internal/provider/types"
	"github.com/speakeasy/terraform-provider-zeronetworks/internal/sdk/models/operations"
	"github.com/speakeasy/terraform-provider-zeronetworks/internal/sdk/models/shared"
)

func (r *InboundMFAPolicyResourceModel) RefreshFromSharedReactivePolicy(ctx context.Context, resp *shared.ReactivePolicy) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.AdditionalPortsList = []tfTypes.PortsList{}

		for _, additionalPortsListItem := range resp.AdditionalPortsList {
			var additionalPortsList tfTypes.PortsList

			additionalPortsList.Ports = types.StringPointerValue(additionalPortsListItem.Ports)
			if additionalPortsListItem.ProtocolType != nil {
				additionalPortsList.ProtocolType = types.Int32Value(int32(*additionalPortsListItem.ProtocolType))
			} else {
				additionalPortsList.ProtocolType = types.Int32Null()
			}

			r.AdditionalPortsList = append(r.AdditionalPortsList, additionalPortsList)
		}
		r.ChangeTicket = types.StringPointerValue(resp.ChangeTicket)
		r.Context = types.Int64PointerValue(resp.Context)
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.CreatedBy = types.StringPointerValue(resp.CreatedBy)
		r.CreatedByName = types.StringPointerValue(resp.CreatedByName)
		r.Description = types.StringPointerValue(resp.Description)
		if resp.DstEntityInfo != nil {
			r.DstEntityInfo.ID = types.StringPointerValue(resp.DstEntityInfo.ID)
			r.DstEntityInfo.Name = types.StringPointerValue(resp.DstEntityInfo.Name)
		}
		r.DstPort = types.StringPointerValue(resp.DstPort)
		r.DstProcessNames = make([]types.String, 0, len(resp.DstProcessNames))
		for _, v := range resp.DstProcessNames {
			r.DstProcessNames = append(r.DstProcessNames, types.StringValue(v))
		}
		if resp.EnforcementSource != nil {
			r.EnforcementSource = types.Int32Value(int32(*resp.EnforcementSource))
		} else {
			r.EnforcementSource = types.Int32Null()
		}
		r.ExcludedSrcEntityInfos = []tfTypes.IDNamePair{}

		for _, excludedSrcEntityInfosItem := range resp.ExcludedSrcEntityInfos {
			var excludedSrcEntityInfos tfTypes.IDNamePair

			excludedSrcEntityInfos.ID = types.StringPointerValue(excludedSrcEntityInfosItem.ID)
			excludedSrcEntityInfos.Name = types.StringPointerValue(excludedSrcEntityInfosItem.Name)

			r.ExcludedSrcEntityInfos = append(r.ExcludedSrcEntityInfos, excludedSrcEntityInfos)
		}
		r.ExcludedSrcProcesses = make([]types.String, 0, len(resp.ExcludedSrcProcesses))
		for _, v := range resp.ExcludedSrcProcesses {
			r.ExcludedSrcProcesses = append(r.ExcludedSrcProcesses, types.StringValue(v))
		}
		r.FallbackToLoggedOnUser = types.BoolPointerValue(resp.FallbackToLoggedOnUser)
		r.ID = types.StringPointerValue(resp.ID)
		r.IdentityProtectionCategoryList = make([]types.Int32, 0, len(resp.IdentityProtectionCategoryList))
		for _, v := range resp.IdentityProtectionCategoryList {
			r.IdentityProtectionCategoryList = append(r.IdentityProtectionCategoryList, types.Int32Value(int32(int(v))))
		}
		r.MfaMethods = make([]types.Int32, 0, len(resp.MfaMethods))
		for _, v := range resp.MfaMethods {
			r.MfaMethods = append(r.MfaMethods, types.Int32Value(int32(int(v))))
		}
		r.Name = types.StringPointerValue(resp.Name)
		r.OverrideBuiltins = types.BoolPointerValue(resp.OverrideBuiltins)
		r.ProtocolType = types.Int64PointerValue(typeconvert.IntPointerToInt64Pointer((*int)(resp.ProtocolType)))
		r.RestrictLoginToOriginatingUser = types.BoolPointerValue(resp.RestrictLoginToOriginatingUser)
		r.RestrictToOriginatedUser = types.BoolPointerValue(resp.RestrictToOriginatedUser)
		if resp.RuleDuration != nil {
			r.RuleDuration = types.Int32Value(int32(*resp.RuleDuration))
		} else {
			r.RuleDuration = types.Int32Null()
		}
		r.SrcEntityInfos = []tfTypes.IDNamePair{}

		for _, srcEntityInfosItem := range resp.SrcEntityInfos {
			var srcEntityInfos tfTypes.IDNamePair

			srcEntityInfos.ID = types.StringPointerValue(srcEntityInfosItem.ID)
			srcEntityInfos.Name = types.StringPointerValue(srcEntityInfosItem.Name)

			r.SrcEntityInfos = append(r.SrcEntityInfos, srcEntityInfos)
		}
		r.SrcProcessNames = make([]types.String, 0, len(resp.SrcProcessNames))
		for _, v := range resp.SrcProcessNames {
			r.SrcProcessNames = append(r.SrcProcessNames, types.StringValue(v))
		}
		r.SrcUserInfos = []tfTypes.IDNamePair{}

		for _, srcUserInfosItem := range resp.SrcUserInfos {
			var srcUserInfos tfTypes.IDNamePair

			srcUserInfos.ID = types.StringPointerValue(srcUserInfosItem.ID)
			srcUserInfos.Name = types.StringPointerValue(srcUserInfosItem.Name)

			r.SrcUserInfos = append(r.SrcUserInfos, srcUserInfos)
		}
		if resp.State != nil {
			r.State = types.Int32Value(int32(*resp.State))
		} else {
			r.State = types.Int32Null()
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
		r.UpdatedBy = types.StringPointerValue(resp.UpdatedBy)
		r.UpdatedByName = types.StringPointerValue(resp.UpdatedByName)
		r.UseDefaultIdp = types.BoolPointerValue(resp.UseDefaultIdp)
		r.UseOccasionalMfa = types.BoolPointerValue(resp.UseOccasionalMfa)
	}

	return diags
}

func (r *InboundMFAPolicyResourceModel) ToOperationsMFAInboundPoliciesDeleteRequest(ctx context.Context) (*operations.MFAInboundPoliciesDeleteRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.MFAInboundPoliciesDeleteRequest{
		ID: id,
	}

	return &out, diags
}

func (r *InboundMFAPolicyResourceModel) ToOperationsMFAInboundPoliciesGetRequest(ctx context.Context) (*operations.MFAInboundPoliciesGetRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.MFAInboundPoliciesGetRequest{
		ID: id,
	}

	return &out, diags
}

func (r *InboundMFAPolicyResourceModel) ToOperationsMFAInboundPoliciesUpdateRequest(ctx context.Context) (*operations.MFAInboundPoliciesUpdateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	reactivePolicyInboundBody, reactivePolicyInboundBodyDiags := r.ToSharedReactivePolicyInboundBody(ctx)
	diags.Append(reactivePolicyInboundBodyDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.MFAInboundPoliciesUpdateRequest{
		ID:                        id,
		ReactivePolicyInboundBody: *reactivePolicyInboundBody,
	}

	return &out, diags
}

func (r *InboundMFAPolicyResourceModel) ToSharedReactivePolicyInboundBody(ctx context.Context) (*shared.ReactivePolicyInboundBody, diag.Diagnostics) {
	var diags diag.Diagnostics

	additionalPortsList := make([]shared.PortsList, 0, len(r.AdditionalPortsList))
	for _, additionalPortsListItem := range r.AdditionalPortsList {
		ports := new(string)
		if !additionalPortsListItem.Ports.IsUnknown() && !additionalPortsListItem.Ports.IsNull() {
			*ports = additionalPortsListItem.Ports.ValueString()
		} else {
			ports = nil
		}
		protocolType := new(shared.Protocol)
		if !additionalPortsListItem.ProtocolType.IsUnknown() && !additionalPortsListItem.ProtocolType.IsNull() {
			*protocolType = shared.Protocol(additionalPortsListItem.ProtocolType.ValueInt32())
		} else {
			protocolType = nil
		}
		additionalPortsList = append(additionalPortsList, shared.PortsList{
			Ports:        ports,
			ProtocolType: protocolType,
		})
	}
	changeTicket := new(string)
	if !r.ChangeTicket.IsUnknown() && !r.ChangeTicket.IsNull() {
		*changeTicket = r.ChangeTicket.ValueString()
	} else {
		changeTicket = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var id string
	id = r.DstEntityInfo.ID.ValueString()

	dstEntityInfo := shared.ReactivePolicyInboundBodyDstEntityInfo{
		ID: id,
	}
	var dstPort string
	dstPort = r.DstPort.ValueString()

	dstProcessNames := make([]string, 0, len(r.DstProcessNames))
	for _, dstProcessNamesItem := range r.DstProcessNames {
		dstProcessNames = append(dstProcessNames, dstProcessNamesItem.ValueString())
	}
	excludedSrcEntityInfos := make([]shared.ReactivePolicyInboundBodyExcludedSrcEntityInfo, 0, len(r.ExcludedSrcEntityInfos))
	for _, excludedSrcEntityInfosItem := range r.ExcludedSrcEntityInfos {
		var id1 string
		id1 = excludedSrcEntityInfosItem.ID.ValueString()

		excludedSrcEntityInfos = append(excludedSrcEntityInfos, shared.ReactivePolicyInboundBodyExcludedSrcEntityInfo{
			ID: id1,
		})
	}
	excludedSrcProcesses := make([]string, 0, len(r.ExcludedSrcProcesses))
	for _, excludedSrcProcessesItem := range r.ExcludedSrcProcesses {
		excludedSrcProcesses = append(excludedSrcProcesses, excludedSrcProcessesItem.ValueString())
	}
	var fallbackToLoggedOnUser bool
	fallbackToLoggedOnUser = r.FallbackToLoggedOnUser.ValueBool()

	identityProtectionCategoryList := make([]shared.IdentityProtectionCategory, 0, len(r.IdentityProtectionCategoryList))
	for _, identityProtectionCategoryListItem := range r.IdentityProtectionCategoryList {
		identityProtectionCategoryList = append(identityProtectionCategoryList, shared.IdentityProtectionCategory(int(identityProtectionCategoryListItem.ValueInt32())))
	}
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	mfaMethods := make([]shared.MfaMethods, 0, len(r.MfaMethods))
	for _, mfaMethodsItem := range r.MfaMethods {
		mfaMethods = append(mfaMethods, shared.MfaMethods(int(mfaMethodsItem.ValueInt32())))
	}
	var overrideBuiltins bool
	overrideBuiltins = r.OverrideBuiltins.ValueBool()

	var protocolType1 int64
	protocolType1 = r.ProtocolType.ValueInt64()

	restrictLoginToOriginatingUser := new(bool)
	if !r.RestrictLoginToOriginatingUser.IsUnknown() && !r.RestrictLoginToOriginatingUser.IsNull() {
		*restrictLoginToOriginatingUser = r.RestrictLoginToOriginatingUser.ValueBool()
	} else {
		restrictLoginToOriginatingUser = nil
	}
	ruleDuration := shared.RuleDuration(r.RuleDuration.ValueInt32())
	srcEntityInfos := make([]shared.ReactivePolicyInboundBodySrcEntityInfo, 0, len(r.SrcEntityInfos))
	for _, srcEntityInfosItem := range r.SrcEntityInfos {
		var id2 string
		id2 = srcEntityInfosItem.ID.ValueString()

		srcEntityInfos = append(srcEntityInfos, shared.ReactivePolicyInboundBodySrcEntityInfo{
			ID: id2,
		})
	}
	srcProcessNames := make([]string, 0, len(r.SrcProcessNames))
	for _, srcProcessNamesItem := range r.SrcProcessNames {
		srcProcessNames = append(srcProcessNames, srcProcessNamesItem.ValueString())
	}
	srcUserInfos := make([]shared.ReactivePolicyInboundBodySrcUserInfo, 0, len(r.SrcUserInfos))
	for _, srcUserInfosItem := range r.SrcUserInfos {
		var id3 string
		id3 = srcUserInfosItem.ID.ValueString()

		srcUserInfos = append(srcUserInfos, shared.ReactivePolicyInboundBodySrcUserInfo{
			ID: id3,
		})
	}
	state := shared.ReactivePolicyState(r.State.ValueInt32())
	useDefaultIdp := new(bool)
	if !r.UseDefaultIdp.IsUnknown() && !r.UseDefaultIdp.IsNull() {
		*useDefaultIdp = r.UseDefaultIdp.ValueBool()
	} else {
		useDefaultIdp = nil
	}
	useOccasionalMfa := new(bool)
	if !r.UseOccasionalMfa.IsUnknown() && !r.UseOccasionalMfa.IsNull() {
		*useOccasionalMfa = r.UseOccasionalMfa.ValueBool()
	} else {
		useOccasionalMfa = nil
	}
	out := shared.ReactivePolicyInboundBody{
		AdditionalPortsList:            additionalPortsList,
		ChangeTicket:                   changeTicket,
		Description:                    description,
		DstEntityInfo:                  dstEntityInfo,
		DstPort:                        dstPort,
		DstProcessNames:                dstProcessNames,
		ExcludedSrcEntityInfos:         excludedSrcEntityInfos,
		ExcludedSrcProcesses:           excludedSrcProcesses,
		FallbackToLoggedOnUser:         fallbackToLoggedOnUser,
		IdentityProtectionCategoryList: identityProtectionCategoryList,
		Name:                           name,
		MfaMethods:                     mfaMethods,
		OverrideBuiltins:               overrideBuiltins,
		ProtocolType:                   protocolType1,
		RestrictLoginToOriginatingUser: restrictLoginToOriginatingUser,
		RuleDuration:                   ruleDuration,
		SrcEntityInfos:                 srcEntityInfos,
		SrcProcessNames:                srcProcessNames,
		SrcUserInfos:                   srcUserInfos,
		State:                          state,
		UseDefaultIdp:                  useDefaultIdp,
		UseOccasionalMfa:               useOccasionalMfa,
	}

	return &out, diags
}
