// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/zeronetworks/terraform-provider-zeronetworks/internal/provider/types"
	"github.com/zeronetworks/terraform-provider-zeronetworks/internal/sdk/models/operations"
	"github.com/zeronetworks/terraform-provider-zeronetworks/internal/sdk/models/shared"
)

func (r *OutboundMFAPolicyDataSourceModel) RefreshFromSharedReactivePolicy(ctx context.Context, resp *shared.ReactivePolicy) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.AdditionalPortsList = []tfTypes.PortsList{}

		for _, additionalPortsListItem := range resp.AdditionalPortsList {
			var additionalPortsList tfTypes.PortsList

			additionalPortsList.Ports = types.StringPointerValue(additionalPortsListItem.Ports)
			if additionalPortsListItem.ProtocolType != nil {
				additionalPortsList.ProtocolType = types.Int32Value(int32(*additionalPortsListItem.ProtocolType))
			} else {
				additionalPortsList.ProtocolType = types.Int32Null()
			}

			r.AdditionalPortsList = append(r.AdditionalPortsList, additionalPortsList)
		}
		r.ChangeTicket = types.StringPointerValue(resp.ChangeTicket)
		r.Context = types.Int64PointerValue(resp.Context)
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.CreatedBy = types.StringPointerValue(resp.CreatedBy)
		r.CreatedByName = types.StringPointerValue(resp.CreatedByName)
		r.Description = types.StringPointerValue(resp.Description)
		if resp.DstEntityInfo == nil {
			r.DstEntityInfo = nil
		} else {
			r.DstEntityInfo = &tfTypes.IDNamePair1{}
			r.DstEntityInfo.ID = types.StringPointerValue(resp.DstEntityInfo.ID)
			r.DstEntityInfo.Name = types.StringPointerValue(resp.DstEntityInfo.Name)
		}
		r.DstPort = types.StringPointerValue(resp.DstPort)
		r.DstProcessNames = make([]types.String, 0, len(resp.DstProcessNames))
		for _, v := range resp.DstProcessNames {
			r.DstProcessNames = append(r.DstProcessNames, types.StringValue(v))
		}
		if resp.EnforcementSource != nil {
			r.EnforcementSource = types.Int32Value(int32(*resp.EnforcementSource))
		} else {
			r.EnforcementSource = types.Int32Null()
		}
		r.ExcludedSrcEntityInfos = []tfTypes.IDNamePair1{}

		for _, excludedSrcEntityInfosItem := range resp.ExcludedSrcEntityInfos {
			var excludedSrcEntityInfos tfTypes.IDNamePair1

			excludedSrcEntityInfos.ID = types.StringPointerValue(excludedSrcEntityInfosItem.ID)
			excludedSrcEntityInfos.Name = types.StringPointerValue(excludedSrcEntityInfosItem.Name)

			r.ExcludedSrcEntityInfos = append(r.ExcludedSrcEntityInfos, excludedSrcEntityInfos)
		}
		r.ExcludedSrcProcesses = make([]types.String, 0, len(resp.ExcludedSrcProcesses))
		for _, v := range resp.ExcludedSrcProcesses {
			r.ExcludedSrcProcesses = append(r.ExcludedSrcProcesses, types.StringValue(v))
		}
		r.FallbackToLoggedOnUser = types.BoolPointerValue(resp.FallbackToLoggedOnUser)
		r.ID = types.StringPointerValue(resp.ID)
		r.IdentityProtectionCategoryList = make([]types.Int32, 0, len(resp.IdentityProtectionCategoryList))
		for _, v := range resp.IdentityProtectionCategoryList {
			r.IdentityProtectionCategoryList = append(r.IdentityProtectionCategoryList, types.Int32Value(int32(int(v))))
		}
		r.MfaMethods = make([]types.Int32, 0, len(resp.MfaMethods))
		for _, v := range resp.MfaMethods {
			r.MfaMethods = append(r.MfaMethods, types.Int32Value(int32(int(v))))
		}
		r.Name = types.StringPointerValue(resp.Name)
		r.OverrideBuiltins = types.BoolPointerValue(resp.OverrideBuiltins)
		if resp.ProtocolType != nil {
			r.ProtocolType = types.Int32Value(int32(*resp.ProtocolType))
		} else {
			r.ProtocolType = types.Int32Null()
		}
		r.RestrictLoginToOriginatingUser = types.BoolPointerValue(resp.RestrictLoginToOriginatingUser)
		r.RestrictToOriginatedUser = types.BoolPointerValue(resp.RestrictToOriginatedUser)
		if resp.RuleDuration != nil {
			r.RuleDuration = types.Int32Value(int32(*resp.RuleDuration))
		} else {
			r.RuleDuration = types.Int32Null()
		}
		r.SrcEntityInfos = []tfTypes.IDNamePair1{}

		for _, srcEntityInfosItem := range resp.SrcEntityInfos {
			var srcEntityInfos tfTypes.IDNamePair1

			srcEntityInfos.ID = types.StringPointerValue(srcEntityInfosItem.ID)
			srcEntityInfos.Name = types.StringPointerValue(srcEntityInfosItem.Name)

			r.SrcEntityInfos = append(r.SrcEntityInfos, srcEntityInfos)
		}
		r.SrcProcessNames = make([]types.String, 0, len(resp.SrcProcessNames))
		for _, v := range resp.SrcProcessNames {
			r.SrcProcessNames = append(r.SrcProcessNames, types.StringValue(v))
		}
		r.SrcUserInfos = []tfTypes.IDNamePair1{}

		for _, srcUserInfosItem := range resp.SrcUserInfos {
			var srcUserInfos tfTypes.IDNamePair1

			srcUserInfos.ID = types.StringPointerValue(srcUserInfosItem.ID)
			srcUserInfos.Name = types.StringPointerValue(srcUserInfosItem.Name)

			r.SrcUserInfos = append(r.SrcUserInfos, srcUserInfos)
		}
		if resp.State != nil {
			r.State = types.Int32Value(int32(*resp.State))
		} else {
			r.State = types.Int32Null()
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
		r.UpdatedBy = types.StringPointerValue(resp.UpdatedBy)
		r.UpdatedByName = types.StringPointerValue(resp.UpdatedByName)
		r.UseDefaultIdp = types.BoolPointerValue(resp.UseDefaultIdp)
		r.UseOccasionalMfa = types.BoolPointerValue(resp.UseOccasionalMfa)
	}

	return diags
}

func (r *OutboundMFAPolicyDataSourceModel) ToOperationsMFAOutboundPoliciesGetRequest(ctx context.Context) (*operations.MFAOutboundPoliciesGetRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.MFAOutboundPoliciesGetRequest{
		ID: id,
	}

	return &out, diags
}
