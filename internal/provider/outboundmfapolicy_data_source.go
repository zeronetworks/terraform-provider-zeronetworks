// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/speakeasy/terraform-provider-zeronetworks/internal/provider/types"
	"github.com/speakeasy/terraform-provider-zeronetworks/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &OutboundMFAPolicyDataSource{}
var _ datasource.DataSourceWithConfigure = &OutboundMFAPolicyDataSource{}

func NewOutboundMFAPolicyDataSource() datasource.DataSource {
	return &OutboundMFAPolicyDataSource{}
}

// OutboundMFAPolicyDataSource is the data source implementation.
type OutboundMFAPolicyDataSource struct {
	client *sdk.ZeroNetworks
}

// OutboundMFAPolicyDataSourceModel describes the data model.
type OutboundMFAPolicyDataSourceModel struct {
	AdditionalPortsList            []tfTypes.PortsList   `tfsdk:"additional_ports_list"`
	ChangeTicket                   types.String          `tfsdk:"change_ticket"`
	Context                        types.Int64           `tfsdk:"context"`
	CreatedAt                      types.Int64           `tfsdk:"created_at"`
	CreatedBy                      types.String          `tfsdk:"created_by"`
	CreatedByName                  types.String          `tfsdk:"created_by_name"`
	Description                    types.String          `tfsdk:"description"`
	DstEntityInfo                  *tfTypes.IDNamePair1  `tfsdk:"dst_entity_info"`
	DstPort                        types.String          `tfsdk:"dst_port"`
	DstProcessNames                []types.String        `tfsdk:"dst_process_names"`
	EnforcementSource              types.Int32           `tfsdk:"enforcement_source"`
	ExcludedSrcEntityInfos         []tfTypes.IDNamePair1 `tfsdk:"excluded_src_entity_infos"`
	ExcludedSrcProcesses           []types.String        `tfsdk:"excluded_src_processes"`
	FallbackToLoggedOnUser         types.Bool            `tfsdk:"fallback_to_logged_on_user"`
	ID                             types.String          `tfsdk:"id"`
	IdentityProtectionCategoryList []types.Int32         `tfsdk:"identity_protection_category_list"`
	MfaMethods                     []types.Int32         `tfsdk:"mfa_methods"`
	Name                           types.String          `tfsdk:"name"`
	OverrideBuiltins               types.Bool            `tfsdk:"override_builtins"`
	ProtocolType                   types.Int32           `tfsdk:"protocol_type"`
	RestrictLoginToOriginatingUser types.Bool            `tfsdk:"restrict_login_to_originating_user"`
	RestrictToOriginatedUser       types.Bool            `tfsdk:"restrict_to_originated_user"`
	RuleDuration                   types.Int32           `tfsdk:"rule_duration"`
	SrcEntityInfos                 []tfTypes.IDNamePair1 `tfsdk:"src_entity_infos"`
	SrcProcessNames                []types.String        `tfsdk:"src_process_names"`
	SrcUserInfos                   []tfTypes.IDNamePair1 `tfsdk:"src_user_infos"`
	State                          types.Int32           `tfsdk:"state"`
	UpdatedAt                      types.Int64           `tfsdk:"updated_at"`
	UpdatedBy                      types.String          `tfsdk:"updated_by"`
	UpdatedByName                  types.String          `tfsdk:"updated_by_name"`
	UseDefaultIdp                  types.Bool            `tfsdk:"use_default_idp"`
	UseOccasionalMfa               types.Bool            `tfsdk:"use_occasional_mfa"`
}

// Metadata returns the data source type name.
func (r *OutboundMFAPolicyDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_outbound_mfa_policy"
}

// Schema defines the schema for the data source.
func (r *OutboundMFAPolicyDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "OutboundMFAPolicy DataSource",

		Attributes: map[string]schema.Attribute{
			"additional_ports_list": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"ports": schema.StringAttribute{
							Computed: true,
						},
						"protocol_type": schema.Int32Attribute{
							Computed: true,
							MarkdownDescription: `* '0' - HOPOPT` + "\n" +
								`* '1' - ICMP` + "\n" +
								`* '2' - IGMP` + "\n" +
								`* '3' - GGP` + "\n" +
								`* '4' - IPv4` + "\n" +
								`* '5' - ST` + "\n" +
								`* '6' - TCP` + "\n" +
								`* '7' - CBT` + "\n" +
								`* '8' - EGP` + "\n" +
								`* '9' - IGP` + "\n" +
								`* '10' - BBN-RCC-MON` + "\n" +
								`* '11' - NVP-II` + "\n" +
								`* '12' - PUP` + "\n" +
								`* '13' - ARGUS` + "\n" +
								`* '14' - EMCON` + "\n" +
								`* '15' - XNET` + "\n" +
								`* '16' - CHAOS` + "\n" +
								`* '17' - UDP` + "\n" +
								`* '18' - MUX` + "\n" +
								`* '19' - DCN-MEAS` + "\n" +
								`* '20' - HMP` + "\n" +
								`* '21' - PRM` + "\n" +
								`* '22' - XNS-IDP` + "\n" +
								`* '23' - TRUNK-1` + "\n" +
								`* '24' - TRUNK-2` + "\n" +
								`* '25' - LEAF-1` + "\n" +
								`* '26' - LEAF-2` + "\n" +
								`* '27' - RDP` + "\n" +
								`* '28' - IRTP` + "\n" +
								`* '29' - ISO-TP4` + "\n" +
								`* '30' - NETBLT` + "\n" +
								`* '31' - MFE-NSP` + "\n" +
								`* '32' - MERIT-INP` + "\n" +
								`* '33' - DCCP` + "\n" +
								`* '34' - 3PC` + "\n" +
								`* '35' - IDPR` + "\n" +
								`* '36' - XTP` + "\n" +
								`* '37' - DDP` + "\n" +
								`* '38' - IDPR-CMTP` + "\n" +
								`* '39' - TP++` + "\n" +
								`* '40' - IL` + "\n" +
								`* '41' - Embedded` + "\n" +
								`* '42' - SDRP` + "\n" +
								`* '43' - IPv6RoutingHeader` + "\n" +
								`* '44' - IPv6FragmentHeader` + "\n" +
								`* '45' - IDRP` + "\n" +
								`* '46' - RSVP` + "\n" +
								`* '47' - GRE` + "\n" +
								`* '48' - DSR` + "\n" +
								`* '49' - BNA` + "\n" +
								`* '50' - ESP` + "\n" +
								`* '51' - AH` + "\n" +
								`* '52' - I-NLSP` + "\n" +
								`* '53' - SwIPe` + "\n" +
								`* '54' - NARP` + "\n" +
								`* '55' - MOBILE` + "\n" +
								`* '56' - TLSP` + "\n" +
								`* '57' - SKIP` + "\n" +
								`* '58' - ICMPv6` + "\n" +
								`* '59' - IPv6NonExtHeader` + "\n" +
								`* '60' - IPv6DestinationOptions` + "\n" +
								`* '61' - Host-interanl` + "\n" +
								`* '62' - CFTP` + "\n" +
								`* '63' - local-network` + "\n" +
								`* '64' - SAT-EXPAK` + "\n" +
								`* '65' - KRYPTOLAN` + "\n" +
								`* '66' - RVD` + "\n" +
								`* '67' - IPPC` + "\n" +
								`* '68' - distributed-file-system` + "\n" +
								`* '69' - SAT-MON` + "\n" +
								`* '70' - VISA` + "\n" +
								`* '71' - IPCU` + "\n" +
								`* '72' - CPNX` + "\n" +
								`* '73' - CPHB` + "\n" +
								`* '74' - WSN` + "\n" +
								`* '75' - PVP` + "\n" +
								`* '76' - BR-SAT-MON` + "\n" +
								`* '77' - ND` + "\n" +
								`* '78' - WB-MON` + "\n" +
								`* '79' - WB-EXPAK` + "\n" +
								`* '80' - ISO-IP` + "\n" +
								`* '81' - VMTP` + "\n" +
								`* '82' - SECURE-VMTP` + "\n" +
								`* '83' - VINES` + "\n" +
								`* '84' - IPTM` + "\n" +
								`* '85' - NSFNET-IGP` + "\n" +
								`* '86' - DGP` + "\n" +
								`* '87' - TCF` + "\n" +
								`* '88' - EIGRP` + "\n" +
								`* '89' - OSPF` + "\n" +
								`* '90' - Sprite-RPC` + "\n" +
								`* '91' - LARP` + "\n" +
								`* '92' - MTP` + "\n" +
								`* '93' - AX.25` + "\n" +
								`* '94' - OS` + "\n" +
								`* '95' - MICP` + "\n" +
								`* '96' - SCC-SP` + "\n" +
								`* '97' - ETHERIP` + "\n" +
								`* '98' - ENCAP` + "\n" +
								`* '99' - private-encryption` + "\n" +
								`* '100' - GMTP` + "\n" +
								`* '101' - IFMP` + "\n" +
								`* '102' - PNNI` + "\n" +
								`* '103' - PIM` + "\n" +
								`* '104' - ARIS` + "\n" +
								`* '105' - SCPS` + "\n" +
								`* '106' - QNX` + "\n" +
								`* '107' - A/N` + "\n" +
								`* '108' - IPComp` + "\n" +
								`* '109' - SNP` + "\n" +
								`* '110' - Compaq-Peer` + "\n" +
								`* '111' - IPX-in-IP` + "\n" +
								`* '112' - VRRP` + "\n" +
								`* '113' - PGM` + "\n" +
								`* '114' - 0-hop` + "\n" +
								`* '115' - L2TP` + "\n" +
								`* '116' - DDX` + "\n" +
								`* '117' - IATP` + "\n" +
								`* '118' - STP` + "\n" +
								`* '119' - SRP` + "\n" +
								`* '120' - UTI` + "\n" +
								`* '121' - SMP` + "\n" +
								`* '122' - SM` + "\n" +
								`* '123' - PTP` + "\n" +
								`* '124' - IS-IS-over-IPv4` + "\n" +
								`* '125' - FIRE` + "\n" +
								`* '126' - CRTP` + "\n" +
								`* '127' - CRUDP` + "\n" +
								`* '128' - SSCOPMCE` + "\n" +
								`* '129' - IPLT` + "\n" +
								`* '130' - SPS` + "\n" +
								`* '131' - PIPE` + "\n" +
								`* '132' - SCTP` + "\n" +
								`* '133' - FC` + "\n" +
								`* '134' - RSVP-E2E-IGNORE` + "\n" +
								`* '135' - Mobility-Header` + "\n" +
								`* '136' - UDPLite` + "\n" +
								`* '137' - MPLS-in-IP` + "\n" +
								`* '138' - manet` + "\n" +
								`* '139' - HIP` + "\n" +
								`* '140' - Shim6` + "\n" +
								`* '141' - WESP` + "\n" +
								`* '142' - ROHC` + "\n" +
								`* '143' - Ethernet` + "\n" +
								`* '144' - 144 (custom)` + "\n" +
								`* '145' - 145 (custom)` + "\n" +
								`* '146' - 146 (custom)` + "\n" +
								`* '147' - 147 (custom)` + "\n" +
								`* '148' - 148 (custom)` + "\n" +
								`* '149' - 149 (custom)` + "\n" +
								`* '150' - 150 (custom)` + "\n" +
								`* '151' - 151 (custom)` + "\n" +
								`* '152' - 152 (custom)` + "\n" +
								`* '153' - 153 (custom)` + "\n" +
								`* '154' - 154 (custom)` + "\n" +
								`* '155' - 155 (custom)` + "\n" +
								`* '156' - 156 (custom)` + "\n" +
								`* '157' - 157 (custom)` + "\n" +
								`* '158' - 158 (custom)` + "\n" +
								`* '159' - 159 (custom)` + "\n" +
								`* '160' - 160 (custom)` + "\n" +
								`* '161' - 161 (custom)` + "\n" +
								`* '162' - 162 (custom)` + "\n" +
								`* '163' - 163 (custom)` + "\n" +
								`* '164' - 164 (custom)` + "\n" +
								`* '165' - 165 (custom)` + "\n" +
								`* '166' - 166 (custom)` + "\n" +
								`* '167' - 167 (custom)` + "\n" +
								`* '168' - 168 (custom)` + "\n" +
								`* '169' - 169 (custom)` + "\n" +
								`* '170' - 170 (custom)` + "\n" +
								`* '171' - 171 (custom)` + "\n" +
								`* '172' - 172 (custom)` + "\n" +
								`* '173' - 173 (custom)` + "\n" +
								`* '174' - 174 (custom)` + "\n" +
								`* '175' - 175 (custom)` + "\n" +
								`* '176' - 176 (custom)` + "\n" +
								`* '177' - 177 (custom)` + "\n" +
								`* '178' - 178 (custom)` + "\n" +
								`* '179' - 179 (custom)` + "\n" +
								`* '180' - 180 (custom)` + "\n" +
								`* '181' - 181 (custom)` + "\n" +
								`* '182' - 182 (custom)` + "\n" +
								`* '183' - 183 (custom)` + "\n" +
								`* '184' - 184 (custom)` + "\n" +
								`* '185' - 185 (custom)` + "\n" +
								`* '186' - 186 (custom)` + "\n" +
								`* '187' - 187 (custom)` + "\n" +
								`* '188' - 188 (custom)` + "\n" +
								`* '189' - 189 (custom)` + "\n" +
								`* '190' - 190 (custom)` + "\n" +
								`* '191' - 191 (custom)` + "\n" +
								`* '192' - 192 (custom)` + "\n" +
								`* '193' - 193 (custom)` + "\n" +
								`* '194' - 194 (custom)` + "\n" +
								`* '195' - 195 (custom)` + "\n" +
								`* '196' - 196 (custom)` + "\n" +
								`* '197' - 197 (custom)` + "\n" +
								`* '198' - 198 (custom)` + "\n" +
								`* '199' - 199 (custom)` + "\n" +
								`* '200' - 200 (custom)` + "\n" +
								`* '201' - 201 (custom)` + "\n" +
								`* '202' - 202 (custom)` + "\n" +
								`* '203' - 203 (custom)` + "\n" +
								`* '204' - 204 (custom)` + "\n" +
								`* '205' - 205 (custom)` + "\n" +
								`* '206' - 206 (custom)` + "\n" +
								`* '207' - 207 (custom)` + "\n" +
								`* '208' - 208 (custom)` + "\n" +
								`* '209' - 209 (custom)` + "\n" +
								`* '210' - 210 (custom)` + "\n" +
								`* '211' - 211 (custom)` + "\n" +
								`* '212' - 212 (custom)` + "\n" +
								`* '213' - 213 (custom)` + "\n" +
								`* '214' - 214 (custom)` + "\n" +
								`* '215' - 215 (custom)` + "\n" +
								`* '216' - 216 (custom)` + "\n" +
								`* '217' - 217 (custom)` + "\n" +
								`* '218' - 218 (custom)` + "\n" +
								`* '219' - 219 (custom)` + "\n" +
								`* '220' - 220 (custom)` + "\n" +
								`* '221' - 221 (custom)` + "\n" +
								`* '222' - 222 (custom)` + "\n" +
								`* '223' - 223 (custom)` + "\n" +
								`* '224' - 224 (custom)` + "\n" +
								`* '225' - 225 (custom)` + "\n" +
								`* '226' - 226 (custom)` + "\n" +
								`* '227' - 227 (custom)` + "\n" +
								`* '228' - 228 (custom)` + "\n" +
								`* '229' - 229 (custom)` + "\n" +
								`* '230' - 230 (custom)` + "\n" +
								`* '231' - 231 (custom)` + "\n" +
								`* '232' - 232 (custom)` + "\n" +
								`* '233' - 233 (custom)` + "\n" +
								`* '234' - 234 (custom)` + "\n" +
								`* '235' - 235 (custom)` + "\n" +
								`* '236' - 236 (custom)` + "\n" +
								`* '237' - 237 (custom)` + "\n" +
								`* '238' - 238 (custom)` + "\n" +
								`* '239' - 239 (custom)` + "\n" +
								`* '240' - 240 (custom)` + "\n" +
								`* '241' - 241 (custom)` + "\n" +
								`* '242' - 242 (custom)` + "\n" +
								`* '243' - 243 (custom)` + "\n" +
								`* '244' - 244 (custom)` + "\n" +
								`* '245' - 245 (custom)` + "\n" +
								`* '246' - 246 (custom)` + "\n" +
								`* '247' - 247 (custom)` + "\n" +
								`* '248' - 248 (custom)` + "\n" +
								`* '249' - 249 (custom)` + "\n" +
								`* '250' - 250 (custom)` + "\n" +
								`* '251' - 251 (custom)` + "\n" +
								`* '252' - 252 (custom)` + "\n" +
								`* '253' - 253 (custom)` + "\n" +
								`* '254' - 254 (custom)` + "\n" +
								`* '255' - Raw` + "\n" +
								`* '256' - Any`,
						},
					},
				},
			},
			"change_ticket": schema.StringAttribute{
				Computed: true,
			},
			"context": schema.Int64Attribute{
				Computed: true,
			},
			"created_at": schema.Int64Attribute{
				Computed:    true,
				Description: `Epoch Millis`,
			},
			"created_by": schema.StringAttribute{
				Computed: true,
			},
			"created_by_name": schema.StringAttribute{
				Computed: true,
			},
			"description": schema.StringAttribute{
				Computed: true,
			},
			"dst_entity_info": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed:    true,
						Description: `EntityId`,
					},
					"name": schema.StringAttribute{
						Computed:    true,
						Description: `Entity Name`,
					},
				},
			},
			"dst_port": schema.StringAttribute{
				Computed: true,
			},
			"dst_process_names": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},
			"enforcement_source": schema.Int32Attribute{
				Computed: true,
				MarkdownDescription: `* '1' - ReactivePolicy` + "\n" +
					`* '2' - Automated` + "\n" +
					`* '3' - AccessPortal` + "\n" +
					`* '4' - AdminPortal` + "\n" +
					`* '5' - AI` + "\n" +
					`* '6' - API` + "\n" +
					`* '7' - Setup` + "\n" +
					`* '8' - Connect` + "\n" +
					`* '9' - System` + "\n" +
					`* '10' - DownloadPortal` + "\n" +
					`* '11' - ExternalAccessPortal` + "\n" +
					`* '12' - DayTwo`,
			},
			"excluded_src_entity_infos": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed:    true,
							Description: `EntityId`,
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Description: `Entity Name`,
						},
					},
				},
			},
			"excluded_src_processes": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},
			"fallback_to_logged_on_user": schema.BoolAttribute{
				Computed: true,
			},
			"id": schema.StringAttribute{
				Required:    true,
				Description: `The id of the MFA policy`,
			},
			"identity_protection_category_list": schema.ListAttribute{
				Computed:    true,
				ElementType: types.Int32Type,
			},
			"mfa_methods": schema.ListAttribute{
				Computed:    true,
				ElementType: types.Int32Type,
			},
			"name": schema.StringAttribute{
				Computed: true,
			},
			"override_builtins": schema.BoolAttribute{
				Computed: true,
			},
			"protocol_type": schema.Int32Attribute{
				Computed:    true,
				Description: `6=TCP, 17=UDP`,
			},
			"restrict_login_to_originating_user": schema.BoolAttribute{
				Computed: true,
			},
			"restrict_to_originated_user": schema.BoolAttribute{
				Computed: true,
			},
			"rule_duration": schema.Int32Attribute{
				Computed: true,
				MarkdownDescription: `* '1' - Hour` + "\n" +
					`* '2' - Day` + "\n" +
					`* '3' - Week` + "\n" +
					`* '4' - Month` + "\n" +
					`* '5' - Never` + "\n" +
					`* '6' - 4 hours` + "\n" +
					`* '7' - 12 hours` + "\n" +
					`* '8' - 8 hours`,
			},
			"src_entity_infos": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed:    true,
							Description: `EntityId`,
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Description: `Entity Name`,
						},
					},
				},
			},
			"src_process_names": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},
			"src_user_infos": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed:    true,
							Description: `EntityId`,
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Description: `Entity Name`,
						},
					},
				},
			},
			"state": schema.Int32Attribute{
				Computed: true,
				MarkdownDescription: `* '1' - Enabled` + "\n" +
					`* '2' - Disabled`,
			},
			"updated_at": schema.Int64Attribute{
				Computed:    true,
				Description: `Epoch Millis`,
			},
			"updated_by": schema.StringAttribute{
				Computed: true,
			},
			"updated_by_name": schema.StringAttribute{
				Computed: true,
			},
			"use_default_idp": schema.BoolAttribute{
				Computed: true,
			},
			"use_occasional_mfa": schema.BoolAttribute{
				Computed: true,
			},
		},
	}
}

func (r *OutboundMFAPolicyDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.ZeroNetworks)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.ZeroNetworks, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *OutboundMFAPolicyDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *OutboundMFAPolicyDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsMFAOutboundPoliciesGetRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.MFAOutbound.MFAOutboundPoliciesGet(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.ReactivePolicyResponse != nil && res.ReactivePolicyResponse.Items != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedReactivePolicy(ctx, res.ReactivePolicyResponse.Items)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
