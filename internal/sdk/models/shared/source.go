// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// Source - Possible asset sources:
//   - '1' - Access portal
//   - '2' - SSP
//   - '3' - Active directory
//   - '4' - Custom
//   - '5' - System
//   - '6' - Ansible
//   - '7' - Manual OT/IoT
//   - '8' - Workgroup
//   - '9' - Azure active directory
//   - '10' - Azure
//   - '11' - AWS
//   - '12' - GCP
//   - '14' - Jamf
//   - '15' - Manual Linux
//   - '16' - IBM cloud
//   - '17' - Oracle cloud
//   - '18' - VMware cloud
//   - '19' - Alibaba cloud
//   - '20' - Lumen cloud
//   - '21' - OVH cloud
//   - '22' - Connect
//   - '23' - AI
//   - '24' - SNOW
//   - '25' - Google Workspace
//   - '26' - OU
//   - '27' - Environment
//   - '28' - Conditional
//   - '29' - Claroty OT
//   - '30' - Manual Mac
type Source int

const (
	SourceTwo         Source = 2
	SourceThree       Source = 3
	SourceSix         Source = 6
	SourceSeven       Source = 7
	SourceEight       Source = 8
	SourceNine        Source = 9
	SourceTen         Source = 10
	SourceEleven      Source = 11
	SourceTwelve      Source = 12
	SourceFourteen    Source = 14
	SourceFifteen     Source = 15
	SourceSixteen     Source = 16
	SourceSeventeen   Source = 17
	SourceEighteen    Source = 18
	SourceNineteen    Source = 19
	SourceTwenty      Source = 20
	SourceTwentyOne   Source = 21
	SourceTwentyTwo   Source = 22
	SourceTwentyThree Source = 23
	SourceTwentyFour  Source = 24
	SourceTwentyFive  Source = 25
	SourceTwentySix   Source = 26
	SourceTwentySeven Source = 27
	SourceTwentyEight Source = 28
	SourceTwentyNine  Source = 29
	SourceThirty      Source = 30
)

func (e Source) ToPointer() *Source {
	return &e
}
func (e *Source) UnmarshalJSON(data []byte) error {
	var v int
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 6:
		fallthrough
	case 7:
		fallthrough
	case 8:
		fallthrough
	case 9:
		fallthrough
	case 10:
		fallthrough
	case 11:
		fallthrough
	case 12:
		fallthrough
	case 14:
		fallthrough
	case 15:
		fallthrough
	case 16:
		fallthrough
	case 17:
		fallthrough
	case 18:
		fallthrough
	case 19:
		fallthrough
	case 20:
		fallthrough
	case 21:
		fallthrough
	case 22:
		fallthrough
	case 23:
		fallthrough
	case 24:
		fallthrough
	case 25:
		fallthrough
	case 26:
		fallthrough
	case 27:
		fallthrough
	case 28:
		fallthrough
	case 29:
		fallthrough
	case 30:
		*e = Source(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Source: %v", v)
	}
}
