// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// IPSecOpt - * For allow rule only.
// * '1' - Off
// * '2' - Null encapsulation connections
// * '3' - Authenticated and integrity-protected connections
// * '4' - Encrypted connections and dynamically negotiate encryption (inbound rule only)
// * '5' - Encrypted connections
type IPSecOpt int

const (
	IPSecOptOne   IPSecOpt = 1
	IPSecOptTwo   IPSecOpt = 2
	IPSecOptThree IPSecOpt = 3
	IPSecOptFour  IPSecOpt = 4
	IPSecOptFive  IPSecOpt = 5
)

func (e IPSecOpt) ToPointer() *IPSecOpt {
	return &e
}
func (e *IPSecOpt) UnmarshalJSON(data []byte) error {
	var v int
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 4:
		fallthrough
	case 5:
		*e = IPSecOpt(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IPSecOpt: %v", v)
	}
}
