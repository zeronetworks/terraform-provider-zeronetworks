// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ProtectionState - * '0' - Unspecified
// * '1' - Unsegmented
// * '2' - Unsegmenting
// * '3' - Segmented
// * '4' - Segmenting
// * '5' - Learning until
// * '6' - forced_unprotected
// * '7' - Unsegmenting' - Due to Policy
// * '8' - Segmented' - Due to Policy
// * '9' - Segmenting- Due to Policy
// * '10' - Learning until' - Due to Policy
// * '11' - Learning done
// * '12' - Learning done- Due to Policy
// * '13' - APPLYING_QUEUE_WITH_BLOCKS
// * '14' - APPLYING_QUEUE_WITH_BLOCKS_DUE_TO_POLICY
// * '15' - QUEUED_WITH_BLOCKS
// * '16' - QUEUED_WITH_BLOCKS_DUE_TO_POLICY
// * '17' - QUEUED_WITH_BLOCKS_DONE
// * '18' - QUEUED_WITH_BLOCKS_DUE_TO_POLICY_DONE
type ProtectionState int

const (
	ProtectionStateZero      ProtectionState = 0
	ProtectionStateOne       ProtectionState = 1
	ProtectionStateTwo       ProtectionState = 2
	ProtectionStateThree     ProtectionState = 3
	ProtectionStateFour      ProtectionState = 4
	ProtectionStateFive      ProtectionState = 5
	ProtectionStateSix       ProtectionState = 6
	ProtectionStateSeven     ProtectionState = 7
	ProtectionStateEight     ProtectionState = 8
	ProtectionStateNine      ProtectionState = 9
	ProtectionStateTen       ProtectionState = 10
	ProtectionStateEleven    ProtectionState = 11
	ProtectionStateTwelve    ProtectionState = 12
	ProtectionStateThirteen  ProtectionState = 13
	ProtectionStateFourteen  ProtectionState = 14
	ProtectionStateFifteen   ProtectionState = 15
	ProtectionStateSixteen   ProtectionState = 16
	ProtectionStateSeventeen ProtectionState = 17
	ProtectionStateEighteen  ProtectionState = 18
)

func (e ProtectionState) ToPointer() *ProtectionState {
	return &e
}
func (e *ProtectionState) UnmarshalJSON(data []byte) error {
	var v int
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 4:
		fallthrough
	case 5:
		fallthrough
	case 6:
		fallthrough
	case 7:
		fallthrough
	case 8:
		fallthrough
	case 9:
		fallthrough
	case 10:
		fallthrough
	case 11:
		fallthrough
	case 12:
		fallthrough
	case 13:
		fallthrough
	case 14:
		fallthrough
	case 15:
		fallthrough
	case 16:
		fallthrough
	case 17:
		fallthrough
	case 18:
		*e = ProtectionState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProtectionState: %v", v)
	}
}
