// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// IssueCode - * '0' - Unspecified
// * '1' - Unknown
// * '2' - Access Denied
// * '3' - IO Device Issue
// * '4' - DotNet 3.5
// * '5' - WMI Corrupted
// * '6' - URL Filtering
// * '7' - Out of Space
// * '8' - Unsupported HMAC
// * '9' - Unsupported Encryption
// * '10' - Setup Script Failed
// * '11' - Slow MFA
// * '12' - Unexpted GPO Rules
// * '13' - Zero Networks GPO Rule Mismatch
// * '14' - Audit Mismatch
// * '15' - Asset ID Mismatch
// * '16' - Unsupported HTTP Version
// * '17' - Registry Marked for Deletion
// * '18' - Unable to add to automation group
// * '19' - Incorrect Username or Password
// * '20' - RPC Open Source Installed
// * '21' - Timeout during initialization
// * '22' - Data collection timeout
// * '23' - Not in Sudoers
// * '24' - Invalid SSH Key
// * '25' - Events Unavailable
// * '26' - SSH Password Incorrect
// * '27' - SSH Password Expired
// * '28' - Segmneted Users not found
// * '29' - Unsupported Python Versions
// * '30' - Cound not query segmented users
// * '31' - Switch unreachable
// * '32' - Switch communication issue
// * '33' - Interface protection resource exceeded
// * '34' - Unsupported Package Manager
// * '35' - Firewall disabled by GPO
// * '36' - Linux firewall logs oversized
// * '1000' - First blocker issue code
// * '1001' - Cluster node ipv6 disabled
// * '1002' - Local rules merge disallowed
type IssueCode int

const (
	IssueCodeZero              IssueCode = 0
	IssueCodeOne               IssueCode = 1
	IssueCodeTwo               IssueCode = 2
	IssueCodeThree             IssueCode = 3
	IssueCodeFour              IssueCode = 4
	IssueCodeFive              IssueCode = 5
	IssueCodeSix               IssueCode = 6
	IssueCodeSeven             IssueCode = 7
	IssueCodeEight             IssueCode = 8
	IssueCodeNine              IssueCode = 9
	IssueCodeTen               IssueCode = 10
	IssueCodeEleven            IssueCode = 11
	IssueCodeTwelve            IssueCode = 12
	IssueCodeThirteen          IssueCode = 13
	IssueCodeFourteen          IssueCode = 14
	IssueCodeFifteen           IssueCode = 15
	IssueCodeSixteen           IssueCode = 16
	IssueCodeSeventeen         IssueCode = 17
	IssueCodeEighteen          IssueCode = 18
	IssueCodeNineteen          IssueCode = 19
	IssueCodeTwenty            IssueCode = 20
	IssueCodeTwentyOne         IssueCode = 21
	IssueCodeTwentyTwo         IssueCode = 22
	IssueCodeTwentyThree       IssueCode = 23
	IssueCodeTwentyFour        IssueCode = 24
	IssueCodeTwentyFive        IssueCode = 25
	IssueCodeTwentySix         IssueCode = 26
	IssueCodeTwentySeven       IssueCode = 27
	IssueCodeTwentyEight       IssueCode = 28
	IssueCodeTwentyNine        IssueCode = 29
	IssueCodeThirty            IssueCode = 30
	IssueCodeThirtyOne         IssueCode = 31
	IssueCodeThirtyTwo         IssueCode = 32
	IssueCodeThirtyThree       IssueCode = 33
	IssueCodeThirtyFour        IssueCode = 34
	IssueCodeThirtyFive        IssueCode = 35
	IssueCodeThirtySix         IssueCode = 36
	IssueCodeOneThousand       IssueCode = 1000
	IssueCodeOneThousandAndOne IssueCode = 1001
	IssueCodeOneThousandAndTwo IssueCode = 1002
)

func (e IssueCode) ToPointer() *IssueCode {
	return &e
}
func (e *IssueCode) UnmarshalJSON(data []byte) error {
	var v int
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 4:
		fallthrough
	case 5:
		fallthrough
	case 6:
		fallthrough
	case 7:
		fallthrough
	case 8:
		fallthrough
	case 9:
		fallthrough
	case 10:
		fallthrough
	case 11:
		fallthrough
	case 12:
		fallthrough
	case 13:
		fallthrough
	case 14:
		fallthrough
	case 15:
		fallthrough
	case 16:
		fallthrough
	case 17:
		fallthrough
	case 18:
		fallthrough
	case 19:
		fallthrough
	case 20:
		fallthrough
	case 21:
		fallthrough
	case 22:
		fallthrough
	case 23:
		fallthrough
	case 24:
		fallthrough
	case 25:
		fallthrough
	case 26:
		fallthrough
	case 27:
		fallthrough
	case 28:
		fallthrough
	case 29:
		fallthrough
	case 30:
		fallthrough
	case 31:
		fallthrough
	case 32:
		fallthrough
	case 33:
		fallthrough
	case 34:
		fallthrough
	case 35:
		fallthrough
	case 36:
		fallthrough
	case 1000:
		fallthrough
	case 1001:
		fallthrough
	case 1002:
		*e = IssueCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IssueCode: %v", v)
	}
}

type HealthIssue struct {
	// * '0' - Unspecified
	// * '1' - Unknown
	// * '2' - Access Denied
	// * '3' - IO Device Issue
	// * '4' - DotNet 3.5
	// * '5' - WMI Corrupted
	// * '6' - URL Filtering
	// * '7' - Out of Space
	// * '8' - Unsupported HMAC
	// * '9' - Unsupported Encryption
	// * '10' - Setup Script Failed
	// * '11' - Slow MFA
	// * '12' - Unexpted GPO Rules
	// * '13' - Zero Networks GPO Rule Mismatch
	// * '14' - Audit Mismatch
	// * '15' - Asset ID Mismatch
	// * '16' - Unsupported HTTP Version
	// * '17' - Registry Marked for Deletion
	// * '18' - Unable to add to automation group
	// * '19' - Incorrect Username or Password
	// * '20' - RPC Open Source Installed
	// * '21' - Timeout during initialization
	// * '22' - Data collection timeout
	// * '23' - Not in Sudoers
	// * '24' - Invalid SSH Key
	// * '25' - Events Unavailable
	// * '26' - SSH Password Incorrect
	// * '27' - SSH Password Expired
	// * '28' - Segmneted Users not found
	// * '29' - Unsupported Python Versions
	// * '30' - Cound not query segmented users
	// * '31' - Switch unreachable
	// * '32' - Switch communication issue
	// * '33' - Interface protection resource exceeded
	// * '34' - Unsupported Package Manager
	// * '35' - Firewall disabled by GPO
	// * '36' - Linux firewall logs oversized
	// * '1000' - First blocker issue code
	// * '1001' - Cluster node ipv6 disabled
	// * '1002' - Local rules merge disallowed
	//
	IssueCode *IssueCode `json:"issueCode,omitempty"`
	Details   *string    `json:"details,omitempty"`
}

func (o *HealthIssue) GetIssueCode() *IssueCode {
	if o == nil {
		return nil
	}
	return o.IssueCode
}

func (o *HealthIssue) GetDetails() *string {
	if o == nil {
		return nil
	}
	return o.Details
}
